##导入宏定义 - 模板
$!define

##包路径（宏定义）
#setPackageSuffix("controller")

##保存文件（宏定义）
#save("/controller", "Controller.java")

##设置表后缀（宏定义） - 重置（宏定义）模板表名：tableName，为其添加自定义后缀
#setTableSuffix("Controller")

##设置Service服务名（自定义）
#set($serviceName = $!tool.append("i",$!tool.firstLowerCase($!tableInfo.name), "Service"))

##设置实体对象名（自定义）
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))

##自动导入包（全局变量）
$!autoImport
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.api.ApiController;
import com.linksame.iot.common.core.constant.enums.BusinessEnum;
import com.linksame.iot.common.core.util.R;
import com.linksame.iot.common.log.annotation.SysLog;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;
import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}VO;
import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO;
import $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

##表注释（宏定义）
#tableComment("表控制层")
@AllArgsConstructor
@RestController
@RequestMapping("/$!tool.firstLowerCase($!tableInfo.name)")
@Api(value = "$!{tableInfo.name}" , tags = "$!{tableInfo.comment}模块")
public class $!{tableName}{

    /** 服务对象 */
    private final I$!{tableInfo.name}Service $!{serviceName};

    /**
     * 新增$!{tableInfo.comment}
     * @param $!{entityName}DTO $!{tableInfo.comment}接收入参DTO
     * @return Boolean.TRUE or Boolean.FALSE
     */
    @SysLog("新增$!{tableInfo.comment}")
    @ApiOperation(value = "新增$!{tableInfo.comment}")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(paramType = "body", name = "$!{entityName}DTO", dataType = "$!{tableInfo.name}DTO", required = true, value = "$!{tableInfo.comment}对象")})
    @PostMapping
    public R<Boolean> save$!{tableInfo.name}(@RequestBody $!{tableInfo.name}DTO $!{entityName}DTO) {
        return R.ok($!{serviceName}.save$!{tableInfo.name}($!{entityName}DTO));
    }

    /**
     * 根据id（逻辑）删除$!{tableInfo.comment}
     * @param id $!{tableInfo.comment}id
     * @return Boolean.TRUE or Boolean.FALSE
     */
    @SysLog("根据id（逻辑）删除$!{tableInfo.comment}")
    @ApiOperation(value = "根据id（逻辑）删除$!{tableInfo.comment}")
    @DeleteMapping
    @ApiImplicitParams(@ApiImplicitParam(paramType = "query", name = "id", dataType = "Integer", required = true, value = "$!{tableInfo.comment}id"))
    public R<Boolean> delete$!{tableInfo.name}(@RequestParam("id") Integer id) {
        if (null != id){
            return R.ok($!{serviceName}.delete$!{tableInfo.name}(id));
        }
        return R.failed(BusinessEnum.PARAMETER_NULL);
    }

    /**
     * 修改$!{tableInfo.comment}
     * @param $!{entityName}DTO $!{tableInfo.comment}接收入参DTO
     * @return Boolean.TRUE or Boolean.FALSE
     */
    @SysLog("修改$!{tableInfo.comment}")
    @ApiOperation(value = "修改$!{tableInfo.comment}")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(paramType = "body", name = "$!{entityName}DTO", dataType = "$!{tableInfo.name}DTO", required = true, value = "$!{tableInfo.comment}对象")})
    @PutMapping
    public R<Boolean> update$!{tableInfo.name}(@RequestBody $!{tableInfo.name}DTO $!{entityName}DTO) {
        return R.ok($!{serviceName}.update$!{tableInfo.name}($!{entityName}DTO));
    }

    /**
     * 根据id查询$!{tableInfo.comment}详情(单服务)
     * @param id $!{tableInfo.comment}id
     * @return $!{tableInfo.comment}展示对象$!{tableInfo.name}VO
     */
    @ApiOperation(value = "根据id查询$!{tableInfo.comment}详情(单服务)")
    @GetMapping
    @ApiImplicitParams(@ApiImplicitParam(paramType = "query", name = "id", dataType = "Integer", required = true, value = "$!{tableInfo.comment}id"))
    public R<$!{tableInfo.name}VO> query$!{tableInfo.name}(@RequestParam("id") Integer id) {
        if (null != id){
            return R.ok($!{serviceName}.query$!{tableInfo.name}(id));
        }
        return R.failed(BusinessEnum.PARAMETER_NULL);
    }

    /**
     * 根据id查询$!{tableInfo.comment}详情(多服务)
     * @param id $!{tableInfo.comment}id
     * @return $!{tableInfo.comment}展示对象$!{tableInfo.name}VO
     */
    @ApiOperation(value = "根据id查询$!{tableInfo.comment}详情(多服务)")
    @GetMapping("/detail")
    @ApiImplicitParams(@ApiImplicitParam(paramType = "query", name = "id", dataType = "Integer", required = true, value = "$!{tableInfo.comment}id"))
    public R<$!{tableInfo.name}VO> query$!{tableInfo.name}Detail(@RequestParam("id") Integer id) {
        if (null != id){
            return R.ok($!{serviceName}.query$!{tableInfo.name}Detail(id));
        }
        return R.failed(BusinessEnum.PARAMETER_NULL);
    }

    /**
     * 无参查询$!{tableInfo.comment}列表
     * @return $!{tableInfo.comment}展示对象集合$!{tableInfo.name}VOList
     */
    @ApiOperation(value = "无参查询$!{tableInfo.comment}列表")
    @GetMapping("/lists")
    public R<List<$!{tableInfo.name}VO>> query$!{tableInfo.name}List() {
        return R.ok($!{serviceName}.query$!{tableInfo.name}List());
    }

    /**
     * 条件查询$!{tableInfo.comment}列表
     * @param $!{entityName}DTO $!{tableInfo.comment}接收入参DTO
     * @return $!{tableInfo.comment}展示对象集合$!{tableInfo.name}VOList
     */
    @ApiOperation(value = "条件查询$!{tableInfo.comment}列表")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(paramType = "body", name = "$!{entityName}DTO", dataType = "$!{tableInfo.name}DTO", required = false, value = "$!{tableInfo.comment}对象")})
    @PostMapping("/lists/conditions")
    public R<List<$!{tableInfo.name}VO>> queryListByConditions(@RequestBody $!{tableInfo.name}DTO $!{entityName}DTO) {
        // 数据权限
        // $!{entityName}DTO.setTenantId(CommonConverter.dataPermission($!{entityName}DTO.getTenantId()));
        return R.ok($!{serviceName}.queryListByConditions($!{entityName}DTO));
    }

    /**
     * 分页条件查询$!{tableInfo.comment}列表
     * @param $!{entityName}DTO $!{tableInfo.comment}接收入参DTO
     * @return $!{tableInfo.comment}展示对象集合$!{tableInfo.name}VOList
     */
    @ApiOperation(value = "分页条件查询$!{tableInfo.comment}列表")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(paramType = "query", name = "page", dataType = "Page", required = true, value = "分页条件"),
            @ApiImplicitParam(paramType = "query", name = "$!{entityName}DTO", dataType = "$!{tableInfo.name}DTO", required = false, value = "$!{tableInfo.comment}对象")})
    @GetMapping("/page/conditions")
    public R<IPage<$!{tableInfo.name}VO>> queryPageByConditions(Page page, $!{tableInfo.name}DTO $!{entityName}DTO) {
        // 数据权限
        // $!{entityName}DTO.setTenantId(CommonConverter.dataPermission($!{entityName}DTO.getTenantId()));
        return R.ok($!{serviceName}.queryPageByConditions(page, $!{entityName}DTO));
    }

    /**
     * 数据权限：参数转换
     *      将 tenantId == 1 的系统租户,处理为无 tenantId 条件的情况 - 20.10.12
     *      提示1：若前端同事未提供tenantId参数,但tenantId又有可能作为有用参数,故需要入参进行处理
     *      提示2：此处对比的非租户类型 tenantType
     *      提示3：系统租户唯一性
     *      提示4：构建角色对应资产结构数据权限 - 2021.08.19
     * @param $!{entityName}DTO 入参
     * @return $!{entityName}DTO 处理后的入参
     */
    private $!{tableInfo.name}DTO dealParam($!{tableInfo.name}DTO $!{entityName}DTO) {
        // 第一层处理:当tenant不传的情况,直接从框架获取对应TenantId数据信息
        if (null == $!{entityName}DTO.getTenantId()) {
            try{
                IotUser user = SecurityUtils.getUser();
                if (null != user.getTenantId()) {
                    $!{entityName}DTO.setTenantId(user.getTenantId());
                }
                // 构建角色资产结构数据权限 - 2021.08.19
                // if (null != user.getRoleId()){
                    // $!{entityName}DTO.setAssertIdList(DataScopeComponent.assemblyParam(user.getRoleId()));
                // }
            }catch (Exception e){
                e.printStackTrace();
                log.info("当前用户登录权限信息获取异常......");
            }
        }
        // 第二层处理:tenant是超级管理员的情况,移除租户边界限制,查询所有
        if ($!{entityName}DTO.getTenantId() == 1) {
            $!{entityName}DTO.setTenantId(null);
        }
        return $!{entityName}DTO;
    }


}