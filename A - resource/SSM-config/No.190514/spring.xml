<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--识别Component注解--><!--扫描对应的包，并且查找需要spring框架创建对象的注解。例如：@Service等-->
    <context:component-scan base-package="com.qianfeng">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!--读取properties文件 ； dbconfig.properties -->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>

    <!--从properties文件中加载对应的值；来使用连接池的方式来创建数据源--><!-- 配置连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 数据连接信息 -->
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driverClassName}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <!-- 初始化时获取三个连接（取值应在minPoolSize与maxPoolSize之间。默认值: 3） -->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
        <!-- 连接池中保留的最小连接数，默认值：3 -->
        <property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
        <!-- 连接池中保留的最大连接数，默认值：15 -->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
        <!-- 当连接池中的连接数耗尽的时候，c3p0一次同时获取的连接数，默认值：3 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
        <!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
        <property name="maxStatements" value="${jdbc.maxStatements}"></property>
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
        <property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property>
        <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
    </bean>

    <!--配置mybatis框架中需要的sessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 关联上面的dateSource -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 通配：设置 -->
            <!-- mapper/*.mapper.xml"  mapper文件下的user改为* ； 以后不管添加多少个mapper.xml都不需要在配置-->
            <!--<property name="mapperLocations" value="classpath:mapper/user.mapper.xml"/>-->
            <!--<property name="mapperLocations" value="classpath:mapper/*.mapper.xml"/>-->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>

        <!--配置mybatis的分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!--设置当前分页插件所使用的数据库-->
                    <!--设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->
                    <!--<property name="helperDialect" value="mysql"/>-->
                    <property name="properties">
                        <value>helperDialect=mysql</value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qianfeng.dao"></property>
        <!--此处是得到sqlsessionfactory的名称，所以是value，不是ref-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>


    <!-- 声明式事务配置 -->

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置通知（配置事务执行的方法定义的名称规则） -->
    <!-- 增删改、service层方法的命名必须以update、save、delete开头 ； 查询不需要提交事务 -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>


    <!-- 配置AOP的规则 -->
    <aop:config>
        <aop:pointcut id="mypc" expression="execution(* com.qianfeng.service.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="mypc"></aop:advisor>
    </aop:config>
</beans>