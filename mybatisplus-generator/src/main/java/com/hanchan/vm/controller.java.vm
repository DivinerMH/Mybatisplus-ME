package ${package.Controller}import com.guodi.common.constant.StatusCode;
import com.guodi.common.entity.AjaxResult;
import com.guodi.frame.system.BaseController;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

;
${package.Service}
        .${table.serviceName}; ${package.Entity}.${entity};


/**
 * @描述：$!{table.comment}控制类
 * @作者: ${author}
 * @日期: ${date}
 */
@RestController
@RequestMapping("/${entity}")
@Api(value = "API - ${table.controllerName}", description = "$!{table.comment}")
public class ${table.controllerName} extends BaseController{

@Autowired
public ${table.serviceName} ${table.entityPath}Service;

/**
 * @描述: 根据实体属性分页查询
 * @入参:
 * @出参:
 * @作者: ${author}
 * @日期: ${date}
 **/
@PostMapping("/listByEntity")
@ApiOperation(value = " 根据实体属性分页查询")
public AjaxResult listByEntity(Page page, ${entity} ${table.entityPath}){
        LambdaQueryWrapper<${entity}> wrapper=new QueryWrapper().lambda();
        IPage<${entity}> iPage= ${table.entityPath}Service.page(page,wrapper);
        return new AjaxResult(iPage);
        }

/**
 * @描述: 根据主键查询
 * @入参:
 * @出参:
 * @作者: ${author}
 * @日期: ${date}
 **/
@PostMapping("/findById")
@ApiOperation(value = "根据主键查询")
@ApiImplicitParams({
        @ApiImplicitParam(name = "id", value = "ID", required = true,
                dataType = "string", paramType = "query")
})
public AjaxResult findById(String id){
        if(StringUtils.isBlank(id)){
        return new AjaxResult(StatusCode.ERROR_CODE_40005,"id不能为空");
        }
    ${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
        return new AjaxResult(${table.entityPath});
        }

/**
 * @描述: 新增
 * @入参:
 * @出参:
 * @作者: ${author}
 * @日期: ${date}
 **/
@PostMapping("/save")
@ApiOperation(value = "新增")
public AjaxResult save(${entity} ${table.entityPath}){
        prepareData(${table.entityPath},true);
    ${table.entityPath}Service.save(${table.entityPath});
        return new AjaxResult();
        }

/**
 * @描述: 修改
 * @入参:
 * @出参:
 * @作者: ${author}
 * @日期: ${date}
 **/
@PostMapping("/update")
@ApiOperation(value = "修改")
public AjaxResult update(${entity} ${table.entityPath}){
        prepareData(${table.entityPath},false);
    ${table.entityPath}Service.updateById(${table.entityPath});
        return new AjaxResult();
        }

/**
 * @描述: 根据主键删除
 * @入参: id
 * @出参:
 * @作者: ${author}
 * @日期: ${date}
 **/
@PostMapping("/delete")
@ApiOperation(value = "根据主键删除")
@ApiImplicitParams({
        @ApiImplicitParam(name = "id", value = "ID", required = true,
                dataType = "string", paramType = "query")
})
public AjaxResult delete(String id){
    ${table.entityPath}Service.removeById(id);
        return new AjaxResult();
        }


private void prepareData(${entity} ${table.entityPath},boolean isSave){
        if(isSave){
    ${table.entityPath}.setCreator(getCurUser().getId());
    ${table.entityPath}.setCreateTime(new Date());
        //防止误修改
    ${table.entityPath}.setModifier(null);
    ${table.entityPath}.setModifyTime(null);
        }else{
    ${table.entityPath}.setModifier(getCurUser().getId());
    ${table.entityPath}.setModifyTime(new Date());
        //防止误修改
    ${table.entityPath}.setCreator(null);
    ${table.entityPath}.setCreateTime(null);
        }
        }
        }